# 1
# Model Technology ModelSim SE vlog 6.6d Compiler 2010.11 Nov  1 2010
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling interface tb_ifc
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# vsim +notimingchecks +nowarnTSCALE -sva -nocoverage -quiet -sv_seed 1234 -novopt top 
# Refreshing C:\Users\badit\Desktop\TSC\TSC\lab2\sim\work.instr_register_pkg
# Refreshing C:\Users\badit\Desktop\TSC\TSC\lab2\sim\work.top
# Refreshing C:\Users\badit\Desktop\TSC\TSC\lab2\sim\work.tb_ifc
# Refreshing C:\Users\badit\Desktop\TSC\TSC\lab2\sim\work.instr_register_test
# Refreshing C:\Users\badit\Desktop\TSC\TSC\lab2\sim\work.instr_register
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(79): Clocking block output test_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(80): Clocking block output test_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(81): Clocking block output test_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(78): Clocking block output test_if.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(87): Clocking block output test_if.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(105): Clocking block output #parent#.test_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(96): Clocking block output #parent#.test_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(101): Clocking block output #parent#.test_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(105): Clocking block output #parent#.test_if.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(96): Clocking block output #parent#.test_if.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/first_test.sv(101): Clocking block output #parent#.test_if.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Error: (vish-4014) No objects found matching '/top/test/seed'.
# Executing ONERROR command at macro ./wave.do line 3
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 2
#   operand_b = 8
#   result = -6
#   time = 20
# 
# Writing to register location 1: 
#   opcode = 7 (MOD)
#   operand_a = 15
#   operand_b = 15
#   result = 0
#   time = 30
# 
# Writing to register location 2: 
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 1
#   result = 0
#   time = 40
# 
# Writing to register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 3
#   result = 3
#   time = 50
# 
# Writing to register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 9
#   result = 4
#   time = 60
# 
# Writing to register location 5: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 10
#   result = 17
#   time = 70
# 
# Writing to register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 0
#   result = 0
#   time = 80
# 
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 14
#   result = 0
#   time = 90
# 
# Writing to register location 8: 
#   opcode = 3 (ADD)
#   operand_a = 5
#   operand_b = 12
#   result = 17
#   time = 100
# 
# Writing to register location 9: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 1
#   result = 14
#   time = 110
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 4 (SUB)
#   operand_a = 2
#   operand_b = 8
#   result = -6
#   time = 125
# 
# Read from register location 1: 
#   opcode = 7 (MOD)
#   operand_a = 15
#   operand_b = 15
#   result = 0
#   time = 135
# 
# Read from register location 2: 
#   opcode = 7 (MOD)
#   operand_a = 2
#   operand_b = 1
#   result = 0
#   time = 145
# 
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 3
#   result = 3
#   time = 155
# 
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 9
#   result = 4
#   time = 165
# 
# Read from register location 5: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 10
#   result = 17
#   time = 175
# 
# Read from register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 0
#   result = 0
#   time = 185
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 14
#   result = 0
#   time = 195
# 
# Read from register location 8: 
#   opcode = 3 (ADD)
#   operand_a = 5
#   operand_b = 12
#   result = 17
#   time = 205
# 
# Read from register location 9: 
#   opcode = 6 (DIV)
#   operand_a = 14
#   operand_b = 1
#   result = 14
#   time = 215
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/first_test.sv(59)
#    Time: 220 ns  Iteration: 2  Instance: /top/test
# 1
# Break in Task run at ../lab01_testbench-interface/first_test.sv line 59
# Simulation Breakpoint: 1
# Break in Task run at ../lab01_testbench-interface/first_test.sv line 59
# MACRO ./run.do PAUSED at line 52
